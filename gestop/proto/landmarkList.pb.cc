// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: landmarkList.proto

#include "landmarkList.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_landmarkList_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LandmarkList_Landmark_landmarkList_2eproto;
namespace hand_tracking {
class LandmarkList_LandmarkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LandmarkList_Landmark> _instance;
} _LandmarkList_Landmark_default_instance_;
class LandmarkListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LandmarkList> _instance;
} _LandmarkList_default_instance_;
}  // namespace hand_tracking
static void InitDefaultsscc_info_LandmarkList_landmarkList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hand_tracking::_LandmarkList_default_instance_;
    new (ptr) ::hand_tracking::LandmarkList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hand_tracking::LandmarkList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LandmarkList_landmarkList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LandmarkList_landmarkList_2eproto}, {
      &scc_info_LandmarkList_Landmark_landmarkList_2eproto.base,}};

static void InitDefaultsscc_info_LandmarkList_Landmark_landmarkList_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hand_tracking::_LandmarkList_Landmark_default_instance_;
    new (ptr) ::hand_tracking::LandmarkList_Landmark();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hand_tracking::LandmarkList_Landmark::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LandmarkList_Landmark_landmarkList_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LandmarkList_Landmark_landmarkList_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_landmarkList_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_landmarkList_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_landmarkList_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_landmarkList_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hand_tracking::LandmarkList_Landmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hand_tracking::LandmarkList_Landmark, x_),
  PROTOBUF_FIELD_OFFSET(::hand_tracking::LandmarkList_Landmark, y_),
  PROTOBUF_FIELD_OFFSET(::hand_tracking::LandmarkList_Landmark, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hand_tracking::LandmarkList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hand_tracking::LandmarkList, landmark_),
  PROTOBUF_FIELD_OFFSET(::hand_tracking::LandmarkList, handedness_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hand_tracking::LandmarkList_Landmark)},
  { 8, -1, sizeof(::hand_tracking::LandmarkList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hand_tracking::_LandmarkList_Landmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hand_tracking::_LandmarkList_default_instance_),
};

const char descriptor_table_protodef_landmarkList_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022landmarkList.proto\022\rhand_tracking\"\207\001\n\014"
  "LandmarkList\0226\n\010landmark\030\001 \003(\0132$.hand_tr"
  "acking.LandmarkList.Landmark\022\022\n\nhandedne"
  "ss\030\002 \001(\010\032+\n\010Landmark\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
  "(\002\022\t\n\001z\030\003 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_landmarkList_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_landmarkList_2eproto_sccs[2] = {
  &scc_info_LandmarkList_landmarkList_2eproto.base,
  &scc_info_LandmarkList_Landmark_landmarkList_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_landmarkList_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_landmarkList_2eproto = {
  false, false, descriptor_table_protodef_landmarkList_2eproto, "landmarkList.proto", 181,
  &descriptor_table_landmarkList_2eproto_once, descriptor_table_landmarkList_2eproto_sccs, descriptor_table_landmarkList_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_landmarkList_2eproto::offsets,
  file_level_metadata_landmarkList_2eproto, 2, file_level_enum_descriptors_landmarkList_2eproto, file_level_service_descriptors_landmarkList_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_landmarkList_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_landmarkList_2eproto)), true);
namespace hand_tracking {

// ===================================================================

void LandmarkList_Landmark::InitAsDefaultInstance() {
}
class LandmarkList_Landmark::_Internal {
 public:
};

LandmarkList_Landmark::LandmarkList_Landmark(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hand_tracking.LandmarkList.Landmark)
}
LandmarkList_Landmark::LandmarkList_Landmark(const LandmarkList_Landmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:hand_tracking.LandmarkList.Landmark)
}

void LandmarkList_Landmark::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

LandmarkList_Landmark::~LandmarkList_Landmark() {
  // @@protoc_insertion_point(destructor:hand_tracking.LandmarkList.Landmark)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LandmarkList_Landmark::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LandmarkList_Landmark::ArenaDtor(void* object) {
  LandmarkList_Landmark* _this = reinterpret_cast< LandmarkList_Landmark* >(object);
  (void)_this;
}
void LandmarkList_Landmark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandmarkList_Landmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkList_Landmark& LandmarkList_Landmark::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LandmarkList_Landmark_landmarkList_2eproto.base);
  return *internal_default_instance();
}


void LandmarkList_Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:hand_tracking.LandmarkList.Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandmarkList_Landmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandmarkList_Landmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hand_tracking.LandmarkList.Landmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hand_tracking.LandmarkList.Landmark)
  return target;
}

size_t LandmarkList_Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hand_tracking.LandmarkList.Landmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkList_Landmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hand_tracking.LandmarkList.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkList_Landmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandmarkList_Landmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hand_tracking.LandmarkList.Landmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hand_tracking.LandmarkList.Landmark)
    MergeFrom(*source);
  }
}

void LandmarkList_Landmark::MergeFrom(const LandmarkList_Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hand_tracking.LandmarkList.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void LandmarkList_Landmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hand_tracking.LandmarkList.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkList_Landmark::CopyFrom(const LandmarkList_Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hand_tracking.LandmarkList.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkList_Landmark::IsInitialized() const {
  return true;
}

void LandmarkList_Landmark::InternalSwap(LandmarkList_Landmark* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LandmarkList_Landmark, z_)
      + sizeof(LandmarkList_Landmark::z_)
      - PROTOBUF_FIELD_OFFSET(LandmarkList_Landmark, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkList_Landmark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LandmarkList::InitAsDefaultInstance() {
}
class LandmarkList::_Internal {
 public:
};

LandmarkList::LandmarkList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  landmark_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hand_tracking.LandmarkList)
}
LandmarkList::LandmarkList(const LandmarkList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      landmark_(from.landmark_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  handedness_ = from.handedness_;
  // @@protoc_insertion_point(copy_constructor:hand_tracking.LandmarkList)
}

void LandmarkList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LandmarkList_landmarkList_2eproto.base);
  handedness_ = false;
}

LandmarkList::~LandmarkList() {
  // @@protoc_insertion_point(destructor:hand_tracking.LandmarkList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LandmarkList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LandmarkList::ArenaDtor(void* object) {
  LandmarkList* _this = reinterpret_cast< LandmarkList* >(object);
  (void)_this;
}
void LandmarkList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandmarkList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkList& LandmarkList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LandmarkList_landmarkList_2eproto.base);
  return *internal_default_instance();
}


void LandmarkList::Clear() {
// @@protoc_insertion_point(message_clear_start:hand_tracking.LandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_.Clear();
  handedness_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandmarkList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hand_tracking.LandmarkList.Landmark landmark = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmark(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool handedness = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          handedness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandmarkList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hand_tracking.LandmarkList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hand_tracking.LandmarkList.Landmark landmark = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmark_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_landmark(i), target, stream);
  }

  // bool handedness = 2;
  if (this->handedness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_handedness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hand_tracking.LandmarkList)
  return target;
}

size_t LandmarkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hand_tracking.LandmarkList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hand_tracking.LandmarkList.Landmark landmark = 1;
  total_size += 1UL * this->_internal_landmark_size();
  for (const auto& msg : this->landmark_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool handedness = 2;
  if (this->handedness() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hand_tracking.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandmarkList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hand_tracking.LandmarkList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hand_tracking.LandmarkList)
    MergeFrom(*source);
  }
}

void LandmarkList::MergeFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hand_tracking.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_.MergeFrom(from.landmark_);
  if (from.handedness() != 0) {
    _internal_set_handedness(from._internal_handedness());
  }
}

void LandmarkList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hand_tracking.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkList::CopyFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hand_tracking.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkList::IsInitialized() const {
  return true;
}

void LandmarkList::InternalSwap(LandmarkList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  landmark_.InternalSwap(&other->landmark_);
  swap(handedness_, other->handedness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandmarkList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hand_tracking
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hand_tracking::LandmarkList_Landmark* Arena::CreateMaybeMessage< ::hand_tracking::LandmarkList_Landmark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hand_tracking::LandmarkList_Landmark >(arena);
}
template<> PROTOBUF_NOINLINE ::hand_tracking::LandmarkList* Arena::CreateMaybeMessage< ::hand_tracking::LandmarkList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hand_tracking::LandmarkList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
