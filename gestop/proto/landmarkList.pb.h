// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: landmarkList.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_landmarkList_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_landmarkList_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_landmarkList_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_landmarkList_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_landmarkList_2eproto;
namespace hand_tracking {
class LandmarkList;
class LandmarkListDefaultTypeInternal;
extern LandmarkListDefaultTypeInternal _LandmarkList_default_instance_;
class LandmarkList_Landmark;
class LandmarkList_LandmarkDefaultTypeInternal;
extern LandmarkList_LandmarkDefaultTypeInternal _LandmarkList_Landmark_default_instance_;
}  // namespace hand_tracking
PROTOBUF_NAMESPACE_OPEN
template<> ::hand_tracking::LandmarkList* Arena::CreateMaybeMessage<::hand_tracking::LandmarkList>(Arena*);
template<> ::hand_tracking::LandmarkList_Landmark* Arena::CreateMaybeMessage<::hand_tracking::LandmarkList_Landmark>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hand_tracking {

// ===================================================================

class LandmarkList_Landmark PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hand_tracking.LandmarkList.Landmark) */ {
 public:
  inline LandmarkList_Landmark() : LandmarkList_Landmark(nullptr) {};
  virtual ~LandmarkList_Landmark();

  LandmarkList_Landmark(const LandmarkList_Landmark& from);
  LandmarkList_Landmark(LandmarkList_Landmark&& from) noexcept
    : LandmarkList_Landmark() {
    *this = ::std::move(from);
  }

  inline LandmarkList_Landmark& operator=(const LandmarkList_Landmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarkList_Landmark& operator=(LandmarkList_Landmark&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LandmarkList_Landmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LandmarkList_Landmark* internal_default_instance() {
    return reinterpret_cast<const LandmarkList_Landmark*>(
               &_LandmarkList_Landmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LandmarkList_Landmark& a, LandmarkList_Landmark& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarkList_Landmark* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandmarkList_Landmark* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LandmarkList_Landmark* New() const final {
    return CreateMaybeMessage<LandmarkList_Landmark>(nullptr);
  }

  LandmarkList_Landmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LandmarkList_Landmark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LandmarkList_Landmark& from);
  void MergeFrom(const LandmarkList_Landmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandmarkList_Landmark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hand_tracking.LandmarkList.Landmark";
  }
  protected:
  explicit LandmarkList_Landmark(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_landmarkList_2eproto);
    return ::descriptor_table_landmarkList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:hand_tracking.LandmarkList.Landmark)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landmarkList_2eproto;
};
// -------------------------------------------------------------------

class LandmarkList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hand_tracking.LandmarkList) */ {
 public:
  inline LandmarkList() : LandmarkList(nullptr) {};
  virtual ~LandmarkList();

  LandmarkList(const LandmarkList& from);
  LandmarkList(LandmarkList&& from) noexcept
    : LandmarkList() {
    *this = ::std::move(from);
  }

  inline LandmarkList& operator=(const LandmarkList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandmarkList& operator=(LandmarkList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LandmarkList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LandmarkList* internal_default_instance() {
    return reinterpret_cast<const LandmarkList*>(
               &_LandmarkList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LandmarkList& a, LandmarkList& b) {
    a.Swap(&b);
  }
  inline void Swap(LandmarkList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandmarkList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LandmarkList* New() const final {
    return CreateMaybeMessage<LandmarkList>(nullptr);
  }

  LandmarkList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LandmarkList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LandmarkList& from);
  void MergeFrom(const LandmarkList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandmarkList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hand_tracking.LandmarkList";
  }
  protected:
  explicit LandmarkList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_landmarkList_2eproto);
    return ::descriptor_table_landmarkList_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LandmarkList_Landmark Landmark;

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarkFieldNumber = 1,
    kHandednessFieldNumber = 2,
  };
  // repeated .hand_tracking.LandmarkList.Landmark landmark = 1;
  int landmark_size() const;
  private:
  int _internal_landmark_size() const;
  public:
  void clear_landmark();
  ::hand_tracking::LandmarkList_Landmark* mutable_landmark(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hand_tracking::LandmarkList_Landmark >*
      mutable_landmark();
  private:
  const ::hand_tracking::LandmarkList_Landmark& _internal_landmark(int index) const;
  ::hand_tracking::LandmarkList_Landmark* _internal_add_landmark();
  public:
  const ::hand_tracking::LandmarkList_Landmark& landmark(int index) const;
  ::hand_tracking::LandmarkList_Landmark* add_landmark();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hand_tracking::LandmarkList_Landmark >&
      landmark() const;

  // bool handedness = 2;
  void clear_handedness();
  bool handedness() const;
  void set_handedness(bool value);
  private:
  bool _internal_handedness() const;
  void _internal_set_handedness(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hand_tracking.LandmarkList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hand_tracking::LandmarkList_Landmark > landmark_;
  bool handedness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landmarkList_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LandmarkList_Landmark

// float x = 1;
inline void LandmarkList_Landmark::clear_x() {
  x_ = 0;
}
inline float LandmarkList_Landmark::_internal_x() const {
  return x_;
}
inline float LandmarkList_Landmark::x() const {
  // @@protoc_insertion_point(field_get:hand_tracking.LandmarkList.Landmark.x)
  return _internal_x();
}
inline void LandmarkList_Landmark::_internal_set_x(float value) {
  
  x_ = value;
}
inline void LandmarkList_Landmark::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:hand_tracking.LandmarkList.Landmark.x)
}

// float y = 2;
inline void LandmarkList_Landmark::clear_y() {
  y_ = 0;
}
inline float LandmarkList_Landmark::_internal_y() const {
  return y_;
}
inline float LandmarkList_Landmark::y() const {
  // @@protoc_insertion_point(field_get:hand_tracking.LandmarkList.Landmark.y)
  return _internal_y();
}
inline void LandmarkList_Landmark::_internal_set_y(float value) {
  
  y_ = value;
}
inline void LandmarkList_Landmark::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:hand_tracking.LandmarkList.Landmark.y)
}

// float z = 3;
inline void LandmarkList_Landmark::clear_z() {
  z_ = 0;
}
inline float LandmarkList_Landmark::_internal_z() const {
  return z_;
}
inline float LandmarkList_Landmark::z() const {
  // @@protoc_insertion_point(field_get:hand_tracking.LandmarkList.Landmark.z)
  return _internal_z();
}
inline void LandmarkList_Landmark::_internal_set_z(float value) {
  
  z_ = value;
}
inline void LandmarkList_Landmark::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:hand_tracking.LandmarkList.Landmark.z)
}

// -------------------------------------------------------------------

// LandmarkList

// repeated .hand_tracking.LandmarkList.Landmark landmark = 1;
inline int LandmarkList::_internal_landmark_size() const {
  return landmark_.size();
}
inline int LandmarkList::landmark_size() const {
  return _internal_landmark_size();
}
inline void LandmarkList::clear_landmark() {
  landmark_.Clear();
}
inline ::hand_tracking::LandmarkList_Landmark* LandmarkList::mutable_landmark(int index) {
  // @@protoc_insertion_point(field_mutable:hand_tracking.LandmarkList.landmark)
  return landmark_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hand_tracking::LandmarkList_Landmark >*
LandmarkList::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable_list:hand_tracking.LandmarkList.landmark)
  return &landmark_;
}
inline const ::hand_tracking::LandmarkList_Landmark& LandmarkList::_internal_landmark(int index) const {
  return landmark_.Get(index);
}
inline const ::hand_tracking::LandmarkList_Landmark& LandmarkList::landmark(int index) const {
  // @@protoc_insertion_point(field_get:hand_tracking.LandmarkList.landmark)
  return _internal_landmark(index);
}
inline ::hand_tracking::LandmarkList_Landmark* LandmarkList::_internal_add_landmark() {
  return landmark_.Add();
}
inline ::hand_tracking::LandmarkList_Landmark* LandmarkList::add_landmark() {
  // @@protoc_insertion_point(field_add:hand_tracking.LandmarkList.landmark)
  return _internal_add_landmark();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hand_tracking::LandmarkList_Landmark >&
LandmarkList::landmark() const {
  // @@protoc_insertion_point(field_list:hand_tracking.LandmarkList.landmark)
  return landmark_;
}

// bool handedness = 2;
inline void LandmarkList::clear_handedness() {
  handedness_ = false;
}
inline bool LandmarkList::_internal_handedness() const {
  return handedness_;
}
inline bool LandmarkList::handedness() const {
  // @@protoc_insertion_point(field_get:hand_tracking.LandmarkList.handedness)
  return _internal_handedness();
}
inline void LandmarkList::_internal_set_handedness(bool value) {
  
  handedness_ = value;
}
inline void LandmarkList::set_handedness(bool value) {
  _internal_set_handedness(value);
  // @@protoc_insertion_point(field_set:hand_tracking.LandmarkList.handedness)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hand_tracking

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_landmarkList_2eproto
